title = 'Relação de apurações por região',
width = 10,
status = 'primary',
solidHeader = TRUE,
background = 'aqua',
collapsible = T,
plotOutput("plot_pvv", height = 380)
),
# Diferença de Votos entre 1° e 2°
box(
title = 'Diferença de Votos entre o 1° E 2° Colocado:',
status = 'primary',
solidHeader = T,
background = 'aqua',
width = 6,
collapsible = T,
h3(textOutput("diff"))
)
)# FIM
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
library(shiny); source('app.r')
# Carrega dados estados
estados <- read.table('estados.txt', sep = ';', header = T)
getdata_url <- function(){
# Configura link de acesso ao TSE
set_link1 <- 'https://https://resultados-sim.tse.jus.br/teste/ele2022/9724/dados-simplificados/'
set_link2 <-'-c0001-e009724-r.json'
for(uf in estados['Sigla']) {
links <- paste(set_link1, uf, '/', uf, set_link2, sep = '')
}
#link 1 simulação 'https://https://resultados-sim.tse.jus.br/teste/ele2022/9724/dados-simplificados/'
#link 2 simulação '-c0001-e009724-r.json'
# Faz o Get dos arquivos JSON e configura dataframes
df_geral <- data.frame()
df_primeiro <- data.frame()
df_segundo <- data.frame()
for(link in links) {
data_UF <- httr::GET(link) |> httr::content()
df_geral <- rbind(df_geral, as.data.frame(data_UF)[1,1:64])
for(i in 1:11){
if(data_UF$cand[[i]]$seq =='1'){
df_primeiro <- rbind(df_primeiro, as.data.frame(data_UF$cand[[i]]))
}
if(data_UF$cand[[i]]$seq =='2'){
df_segundo <- rbind(df_segundo, as.data.frame(data_UF$cand[[i]]))
}
}
}
df_list <- list(df_geral, df_primeiro, df_segundo)
return(df_list)
}
# Create a df_geral
df_get_geral <- function(){
df_geral <- getdata_url()
return(df_geral[[1]])
}
# Create a df_primeiro colocado
df_get_primeiro <- function(){
df_primeiro <- getdata_url()
return(df_primeiro[[2]])
}
# Create a df_segundo colocado
df_get_segundo <- function(){
df_segundo <- getdata_url()
return(df_segundo[[3]])
}
gera <- df_get_geral()
gera <- df_get_geral()
gera <- df_get_geral()
gera <- df_get_geral()
getdata_url <- function(){
# Configura link de acesso ao TSE
set_link1 <- 'https://resultados-sim.tse.jus.br/teste/ele2022/9724/dados-simplificados/'
set_link2 <-'-c0001-e009724-r.json'
for(uf in estados['Sigla']) {
links <- paste(set_link1, uf, '/', uf, set_link2, sep = '')
}
#link 1 simulação 'https://https://resultados-sim.tse.jus.br/teste/ele2022/9724/dados-simplificados/'
#link 2 simulação '-c0001-e009724-r.json'
# Faz o Get dos arquivos JSON e configura dataframes
df_geral <- data.frame()
df_primeiro <- data.frame()
df_segundo <- data.frame()
for(link in links) {
data_UF <- httr::GET(link) |> httr::content()
df_geral <- rbind(df_geral, as.data.frame(data_UF)[1,1:64])
for(i in 1:11){
if(data_UF$cand[[i]]$seq =='1'){
df_primeiro <- rbind(df_primeiro, as.data.frame(data_UF$cand[[i]]))
}
if(data_UF$cand[[i]]$seq =='2'){
df_segundo <- rbind(df_segundo, as.data.frame(data_UF$cand[[i]]))
}
}
}
df_list <- list(df_geral, df_primeiro, df_segundo)
return(df_list)
}
# Create a df_geral
df_get_geral <- function(){
df_geral <- getdata_url()
return(df_geral[[1]])
}
# Create a df_primeiro colocado
df_get_primeiro <- function(){
df_primeiro <- getdata_url()
return(df_primeiro[[2]])
}
# Create a df_segundo colocado
df_get_segundo <- function(){
df_segundo <- getdata_url()
return(df_segundo[[3]])
}
obj1 <- df_get_geral()
# Configura link de acesso ao TSE
set_link1 <- 'https://resultados-sim.tse.jus.br/teste/ele2022/9722/dados-simplificados/'
set_link2 <-'-c0001-e009724-r.json'
for(uf in estados['Sigla']) {
links <- paste(set_link1, uf, '/', uf, set_link2, sep = '')
}
#link 1 simulação 'https://https://resultados-sim.tse.jus.br/teste/ele2022/9724/dados-simplificados/'
#link 2 simulação '-c0001-e009724-r.json'
# Faz o Get dos arquivos JSON e configura dataframes
df_geral <- data.frame()
df_primeiro <- data.frame()
df_segundo <- data.frame()
for(link in links) {
data_UF <- httr::GET(link) |> httr::content()
df_geral <- rbind(df_geral, as.data.frame(data_UF)[1,1:64])
for(i in 1:11){
if(data_UF$cand[[i]]$seq =='1'){
df_primeiro <- rbind(df_primeiro, as.data.frame(data_UF$cand[[i]]))
}
if(data_UF$cand[[i]]$seq =='2'){
df_segundo <- rbind(df_segundo, as.data.frame(data_UF$cand[[i]]))
}
}
}
df_list <- list(df_geral, df_primeiro, df_segundo)
return(df_list)
getdata_url <- function(){
# Configura link de acesso ao TSE
set_link1 <- 'https://resultados-sim.tse.jus.br/teste/ele2022/9722/dados-simplificados/'
set_link2 <-'-c0001-e009724-r.json'
for(uf in estados['Sigla']) {
links <- paste(set_link1, uf, '/', uf, set_link2, sep = '')
}
#link 1 simulação 'https://https://resultados-sim.tse.jus.br/teste/ele2022/9724/dados-simplificados/'
#link 2 simulação '-c0001-e009724-r.json'
# Faz o Get dos arquivos JSON e configura dataframes
df_geral <- data.frame()
df_primeiro <- data.frame()
df_segundo <- data.frame()
for(link in links) {
data_UF <- httr::GET(link) |> httr::content()
df_geral <- rbind(df_geral, as.data.frame(data_UF)[1,1:64])
for(i in 1:11){
if(data_UF$cand[[i]]$seq =='1'){
df_primeiro <- rbind(df_primeiro, as.data.frame(data_UF$cand[[i]]))
}
if(data_UF$cand[[i]]$seq =='2'){
df_segundo <- rbind(df_segundo, as.data.frame(data_UF$cand[[i]]))
}
}
}
df_list <- list(df_geral, df_primeiro, df_segundo)
return(df_list)
}
# Create a df_geral
df_get_geral <- function(){
df_geral <- getdata_url()
return(df_geral[[1]])
}
# Create a df_primeiro colocado
df_get_primeiro <- function(){
df_primeiro <- getdata_url()
return(df_primeiro[[2]])
}
# Create a df_segundo colocado
df_get_segundo <- function(){
df_segundo <- getdata_url()
return(df_segundo[[3]])
}
obj1 <- df_get_geral()
obj1
obj1 <- df_get_geral()
# Configura link de acesso ao TSE
set_link1 <- 'https://resultados-sim.tse.jus.br/teste/ele2022/9722/dados-simplificados/'
set_link2 <-'-c0001-e009722-r.json'
for(uf in estados['Sigla']) {
links <- paste(set_link1, uf, '/', uf, set_link2, sep = '')
}
#link 1 simulação 'https://https://resultados-sim.tse.jus.br/teste/ele2022/9724/dados-simplificados/'
#link 2 simulação '-c0001-e009724-r.json'
# Faz o Get dos arquivos JSON e configura dataframes
df_geral <- data.frame()
df_primeiro <- data.frame()
df_segundo <- data.frame()
for(link in links) {
data_UF <- httr::GET(link) |> httr::content()
df_geral <- rbind(df_geral, as.data.frame(data_UF)[1,1:64])
for(i in 1:11){
if(data_UF$cand[[i]]$seq =='1'){
df_primeiro <- rbind(df_primeiro, as.data.frame(data_UF$cand[[i]]))
}
if(data_UF$cand[[i]]$seq =='2'){
df_segundo <- rbind(df_segundo, as.data.frame(data_UF$cand[[i]]))
}
}
}
df_list <- list(df_geral, df_primeiro, df_segundo)
return(df_list)
getdata_url <- function(){
# Configura link de acesso ao TSE
set_link1 <- 'https://resultados-sim.tse.jus.br/teste/ele2022/9722/dados-simplificados/'
set_link2 <-'-c0001-e009722-r.json'
for(uf in estados['Sigla']) {
links <- paste(set_link1, uf, '/', uf, set_link2, sep = '')
}
#link 1 simulação 'https://https://resultados-sim.tse.jus.br/teste/ele2022/9724/dados-simplificados/'
#link 2 simulação '-c0001-e009724-r.json'
# Faz o Get dos arquivos JSON e configura dataframes
df_geral <- data.frame()
df_primeiro <- data.frame()
df_segundo <- data.frame()
for(link in links) {
data_UF <- httr::GET(link) |> httr::content()
df_geral <- rbind(df_geral, as.data.frame(data_UF)[1,1:64])
for(i in 1:11){
if(data_UF$cand[[i]]$seq =='1'){
df_primeiro <- rbind(df_primeiro, as.data.frame(data_UF$cand[[i]]))
}
if(data_UF$cand[[i]]$seq =='2'){
df_segundo <- rbind(df_segundo, as.data.frame(data_UF$cand[[i]]))
}
}
}
df_list <- list(df_geral, df_primeiro, df_segundo)
return(df_list)
}
# Create a df_geral
df_get_geral <- function(){
df_geral <- getdata_url()
return(df_geral[[1]])
}
# Create a df_primeiro colocado
df_get_primeiro <- function(){
df_primeiro <- getdata_url()
return(df_primeiro[[2]])
}
# Create a df_segundo colocado
df_get_segundo <- function(){
df_segundo <- getdata_url()
return(df_segundo[[3]])
}
obj1 <- df_get_geral()
return(df_geral)
# Create a df_geral
df_get_geral <- function(){
df_geral <- getdata_url()
return(df_geral)
}
obj1 <- df_get_geral()
data_UF <- httr::GET('https://resultados-sim.tse.jus.br/teste/ele2022/9722/dados-simplificados/br/br-c0001-e009722-r.json') |> httr::content()
View(data_UF)
data_UF <- httr::GET('https://resultados-sim.tse.jus.br/teste/ele2022/9722/dados-simplificados/br/br-c0001-e009722-r.json') |> httr::content()
View(data_UF)
source('app.r')
source('app.r')
source('app.r')
source('app.r')
data_UF <- httr::GET('https://resultados-sim.tse.jus.br/teste/ele2022/9722/dados-simplificados/mt/mt-c0001-e009722-r.json') |> httr::content()
View(data_UF)
df <- as.data.frame(data_UF)
View(df)
df[1,64]
df[1,1:64]
View(df[1,1:64])
df[1,1:64]$pvv
df[1,1:64]$pvvc
obj2 <- df[1,1:64]
obj2$pvv
source('app.r')
source('app.r')
source('app.r')
# Carrega dados estados
estados <- read.table('estados.txt', sep = ';', header = T)
getdata_url <- function(){
# Configura link de acesso ao TSE
set_link1 <- 'https://resultados-sim.tse.jus.br/teste/ele2022/9722/dados-simplificados/'
set_link2 <-'-c0001-e009722-r.json'
for(uf in estados['Sigla']) {
links <- paste(set_link1, uf, '/', uf, set_link2, sep = '')
}
#link 1 simulação 'https://https://resultados-sim.tse.jus.br/teste/ele2022/9724/dados-simplificados/'
#link 2 simulação '-c0001-e009724-r.json'
# Faz o Get dos arquivos JSON e configura dataframes
df_geral <- data.frame()
df_primeiro <- data.frame()
df_segundo <- data.frame()
for(link in links) {
data_UF <- httr::GET(link) |> httr::content()
df_geral <- rbind(df_geral, as.data.frame(data_UF)[1,1:64])
for(i in 1:11){
if(data_UF$cand[[i]]$seq =='1'){
df_primeiro <- rbind(df_primeiro, as.data.frame(data_UF$cand[[i]]))
}
if(data_UF$cand[[i]]$seq =='2'){
df_segundo <- rbind(df_segundo, as.data.frame(data_UF$cand[[i]]))
}
}
}
df_list <- list(df_geral, df_primeiro, df_segundo)
return(df_list)
}
# Create a df_geral
df_get_geral <- function(){
df_geral <- getdata_url()
return(df_geral[[1]])
}
# Create a df_primeiro colocado
df_get_primeiro <- function(){
df_primeiro <- getdata_url()
return(df_primeiro[[2]])
}
# Create a df_segundo colocado
df_get_segundo <- function(){
df_segundo <- getdata_url()
return(df_segundo[[3]])
}
source('plot_pvv.r')
source('getdataTSE.r')
df <- df_get_geral()
source('app.r')
deployApp(launch.browser = F, forceUpdate = T )
# Carrega pacote para gerenciamento do deploy no r studio connect
library(rsconnect)
deployApp(launch.browser = F, forceUpdate = T )
deployApp(launch.browser = F, forceUpdate = T )
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
deployApp(launch.browser = F, forceUpdate = T )
deployApp(launch.browser = F, forceUpdate = T )
runApp()
source('app.r')
source('app.r')
source('app.r')
library(scales)
source('app.r')
source('app.r')
source('app.r')
plot_pvv <- ggplot(regional_pvv, aes(x=`Regiões`, y=median_pvv, fill = `Regiões`)) +
geom_bar(stat = 'identity')+
geom_col(position = "fill")+
scale_fill_brewer(palette = "Pastel1")+
scale_y_continuous(labels = scales::percent) +
geom_text(aes(label=paste0(median_pvv,'%')), vjust=0.5, color="black",
position = position_dodge(0.9), size=6)+
ylab('% das apurações') +
xlab('Regiões da Federação')+
coord_flip()
source('app.r')
deployApp(launch.browser = F, forceUpdate = T )
deployApp(launch.browser = F, forceUpdate = T )
source('app.r')
runApp()
library(gcookbook) # Load gcookbook for the cabbage_exp data set
install.packages('gcookbook')
library(gcookbook) # Load gcookbook for the cabbage_exp data set
ggplot(cabbage_exp, aes(x = Date, y = Weight, fill = Cultivar)) +
geom_col(position = "fill")
View(cabbage_exp)
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
rep(1,5)
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
round(12.33)
round(12.33, 2)
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
obj1 <- df_get_geral()
View(obj1)
source('app.r')
source('app.r')
plot_pvv <- ggplot(regional_pvv, aes(x=Regioes, y=median_pvv, fill = Regioes)) +
geom_bar(stat = 'identity')+
geom_col(position='fill' )+
scale_fill_brewer(palette = "Pastel1")+
geom_text(aes(label=paste0(round(median_pvv, 2),'%')), vjust=0.5, color="black",
position = position_dodge(0.9), size=6)+
ylab('% das apurações') +
xlab('Regiões da Federação')+
coord_flip()
source('app.r')
source('app.r')
source('app.r')
source('app.r')
obj <- df_get_geral()
View(obj)
obj1 <- df_get_primeiro()
View(obj1)
source('app.r')
source('app.r')
source('app.r')
page_regional <- fluidRow(
box(div(class = "my-class", "Div content")),
tags$img(src= textOutput('img1')),
textOutput('img1')
)# FIM
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
df_get_geral() -> obj3
View(obj3)
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
runApp()
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
sessionInfo()
source('app.r')
source('app.r')
deployApp(launch.browser = F, forceUpdate = T )
