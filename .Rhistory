'HAtualizacao' <- hg,
'Result%' <- result_cand1,
'Nome_Cand' <- nm_cand1,
)
df_result <- data.frame(
'HAtualizacao' <- hg,
'Result%' <- result_cand1,
'Nome_Cand' <- nm_cand1
)
df_result <- rbind(df_result, hg, result_cand2, nm_cand2)
colnames(df_result) <- c('Hora_Atualizacao', 'Result%', 'Nome_Cand')
View(df_result)
source('get_result.R')
library(dplyr)
library(readr)
# Carrega dados estados
estados <- read.table('estados.txt', sep = ';', header = T)
# Configura link de acesso ao TSE
set_link1 <- 'https://resultados-sim.tse.jus.br/teste/ele2022/9722/dados-simplificados/'
set_link2 <-'-c0001-e009722-r.json'
for(uf in estados['Sigla']) {
links <- paste(set_link1, uf, '/', uf, set_link2, sep = '')
}
getdata_url <- function(){
# Faz o Get dos arquivos JSON e configura dataframes
df_geral <- data.frame()
df_primeiro <- data.frame()
df_segundo <- data.frame()
for(link in links) {
data_UF <- httr::content(httr::GET(link))
df_geral <- rbind(df_geral, as.data.frame(data_UF)[1,1:64])
for(i in 1:2){
if(data_UF$cand[[i]]$seq =='1'){
df_primeiro <- rbind(df_primeiro, as.data.frame(data_UF$cand[[i]]))
}
if(data_UF$cand[[i]]$seq =='2'){
df_segundo <- rbind(df_segundo, as.data.frame(data_UF$cand[[i]]))
}
}
}
return(list(df_geral, df_primeiro, df_segundo))
}
# Create a df_geral
df_get_geral <- function(){
df_geral <- getdata_url()
return(df_geral[[1]])
}
# Create a df_primeiro colocado
df_get_primeiro <- function(){
df_primeiro <- getdata_url()
return(df_primeiro[[2]])
}
# Create a df_segundo colocado
df_get_segundo <- function(){
df_segundo <- getdata_url()
return(df_segundo[[3]])
}
# Tratamento dados df_geral -> Variáveis de interesse: pst - gd - cdabr - hg
df_geral <- df_get_geral()
df_geral <- select(df_geral, cdabr, hg, dg, pst)
df_geral['pst'] <- gsub(',', '.', df_geral$pst)
df_geral["pst"] <- sapply(df_geral$pst, as.numeric)
# Tratamento dados df_primeiro -> Variáveis de interesse: pvap - vap - nm - sqcand
df_primeiro <- df_get_primeiro()
df_primeiro <- select(df_primeiro, pvap, vap, nm, sqcand)
df_primeiro['pvap'] <- gsub(',', '.', df_primeiro$pvap)
df_primeiro['pvap'] <- sapply(df_primeiro$pvap, as.numeric)
# Tratamento dados df_segundo -> Variáveis de interesse: pvap - vap - nm - sqcand
df_segundo <- df_get_segundo()
df_segundo <- select(df_segundo, pvap, vap, nm, sqcand)
df_segundo['pvap'] <- gsub(',', '.', df_segundo$pvap)
df_segundo['pvap'] <- sapply(df_segundo$pvap, as.numeric)
# Permanecer datasets em csv
get_result(df_geral, df_primeiro, df_segundo)
write_csv(df_segundo,'df_segundo.csv')
df <- df_geral
df1 <- df_primeiro
df2 <- df_segundo
hg <- (select(df, hg) %>% filter(df$cdabr == 'br'))[1,1]
result_cand1 <- select(df1, pvap)[1,1]
nm_cand1 <- select(df1, nm)[1,1]
result_cand2 <- select(df2, pvap)[1,1]
nm_cand2 <- select(df2, nm)[1,1]
df_result <- data.frame(
'HAtualizacao' <- hg,
'Result%' <- result_cand1,
'Nome_Cand' <- nm_cand1
)
colnames(df_result) <- c('Hora_Atualizacao', 'Result%', 'Nome_Cand')
df_result
rbind(df_result, hg, result_cand2, nm_cand2)
hg
nm_cand1
nm_cand2
result_cand1
result_cand2
rbind( hg, result_cand2, nm_cand2)
cbind( hg, result_cand2, nm_cand2)
cbind( 1, 2, 3)
cbind(df_result,  1, 2, 3)
rbind(df_result,  1, 2, 3)
df_result
rbind(df_result,  1, 2, 3)
rbind(df_result,  c(1, 2, 3))
df_result <- rbind(df_result, c(hg, result_cand2, nm_cand2))
rbind(df_result,  c(1, 2, 3))
df_result
# Permanecer datasets em csv
get_result(df_geral, df_primeiro, df_segundo)
hg <- (select(df, hg) %>% filter(df$cdabr == 'br'))[1,1]
result_cand1 <- select(df1, pvap)[1,1]
nm_cand1 <- select(df1, nm)[1,1]
result_cand2 <- select(df2, pvap)[1,1]
nm_cand2 <- select(df2, nm)[1,1]
df_result <- data.frame(
'HAtualizacao' <- hg,
'Result_%' <- result_cand1,
'Nome_Cand' <- nm_cand1
)
df_result <- rbind(df_result, c(hg, result_cand2, nm_cand2))
colnames(df_result) <- c('Hora_Atualizacao', 'Result_%', 'Nome_Cand')
if(file.exists('result2_time.csv')){
hg_check <- read_csv('results_time.csv', col_names = F)
if(hg != as.character(tail(hg_check$X1, n=1)) ){
write_csv(df_result, 'results_time.csv', append= TRUE)
} # FIM if
}else{
write_csv(df_result, 'result2_time.csv')
}
hg <- (select(df, hg) %>% filter(df$cdabr == 'br'))[1,1]
result_cand1 <- select(df1, pvap)[1,1]
nm_cand1 <- select(df1, nm)[1,1]
result_cand2 <- select(df2, pvap)[1,1]
nm_cand2 <- select(df2, nm)[1,1]
df_result <- data.frame(
'HAtualizacao' <- hg,
'Result_%' <- result_cand1,
'Nome_Cand' <- nm_cand1
)
df_result <- rbind(df_result, c(hg, result_cand2, nm_cand2))
colnames(df_result) <- c('Hora_Atualizacao', 'Result_%', 'Nome_Cand')
if(file.exists('result2_time.csv')){
hg_check <- read_csv('results_time.csv', col_names = F)
if(hg != as.character(tail(hg_check$X1, n=1)) ){
write_csv(df_result, 'results_time.csv', append= TRUE)
} # FIM if
}else{
write_csv(df_result, 'result2_time.csv')
}
return()
# Permanecer datasets em csv
get_result(df_geral, df_primeiro, df_segundo)
source('get_result.R')
library(dplyr)
library(readr)
# Carrega dados estados
estados <- read.table('estados.txt', sep = ';', header = T)
# Configura link de acesso ao TSE
set_link1 <- 'https://resultados-sim.tse.jus.br/teste/ele2022/9722/dados-simplificados/'
set_link2 <-'-c0001-e009722-r.json'
for(uf in estados['Sigla']) {
links <- paste(set_link1, uf, '/', uf, set_link2, sep = '')
}
getdata_url <- function(){
# Faz o Get dos arquivos JSON e configura dataframes
df_geral <- data.frame()
df_primeiro <- data.frame()
df_segundo <- data.frame()
for(link in links) {
data_UF <- httr::content(httr::GET(link))
df_geral <- rbind(df_geral, as.data.frame(data_UF)[1,1:64])
for(i in 1:2){
if(data_UF$cand[[i]]$seq =='1'){
df_primeiro <- rbind(df_primeiro, as.data.frame(data_UF$cand[[i]]))
}
if(data_UF$cand[[i]]$seq =='2'){
df_segundo <- rbind(df_segundo, as.data.frame(data_UF$cand[[i]]))
}
}
}
return(list(df_geral, df_primeiro, df_segundo))
}
# Create a df_geral
df_get_geral <- function(){
df_geral <- getdata_url()
return(df_geral[[1]])
}
# Create a df_primeiro colocado
df_get_primeiro <- function(){
df_primeiro <- getdata_url()
return(df_primeiro[[2]])
}
# Create a df_segundo colocado
df_get_segundo <- function(){
df_segundo <- getdata_url()
return(df_segundo[[3]])
}
# Tratamento dados df_geral -> Variáveis de interesse: pst - gd - cdabr - hg
df_geral <- df_get_geral()
df_geral <- select(df_geral, cdabr, hg, dg, pst)
df_geral['pst'] <- gsub(',', '.', df_geral$pst)
df_geral["pst"] <- sapply(df_geral$pst, as.numeric)
# Tratamento dados df_primeiro -> Variáveis de interesse: pvap - vap - nm - sqcand
df_primeiro <- df_get_primeiro()
df_primeiro <- select(df_primeiro, pvap, vap, nm, sqcand)
df_primeiro['pvap'] <- gsub(',', '.', df_primeiro$pvap)
df_primeiro['pvap'] <- sapply(df_primeiro$pvap, as.numeric)
# Tratamento dados df_segundo -> Variáveis de interesse: pvap - vap - nm - sqcand
df_segundo <- df_get_segundo()
df_segundo <- select(df_segundo, pvap, vap, nm, sqcand)
df_segundo['pvap'] <- gsub(',', '.', df_segundo$pvap)
df_segundo['pvap'] <- sapply(df_segundo$pvap, as.numeric)
# Permanecer datasets em csv
get_result(df_geral, df_primeiro, df_segundo)
# Permanecer datasets em csv
get_result(df_geral, df_primeiro, df_segundo)
# Permanecer datasets em csv
get_result(df_geral, df_primeiro, df_segundo)
source('get_result.R')
library(dplyr)
library(readr)
# Carrega dados estados
estados <- read.table('estados.txt', sep = ';', header = T)
# Configura link de acesso ao TSE
set_link1 <- 'https://resultados-sim.tse.jus.br/teste/ele2022/9722/dados-simplificados/'
set_link2 <-'-c0001-e009722-r.json'
for(uf in estados['Sigla']) {
links <- paste(set_link1, uf, '/', uf, set_link2, sep = '')
}
getdata_url <- function(){
# Faz o Get dos arquivos JSON e configura dataframes
df_geral <- data.frame()
df_primeiro <- data.frame()
df_segundo <- data.frame()
for(link in links) {
data_UF <- httr::content(httr::GET(link))
df_geral <- rbind(df_geral, as.data.frame(data_UF)[1,1:64])
for(i in 1:2){
if(data_UF$cand[[i]]$seq =='1'){
df_primeiro <- rbind(df_primeiro, as.data.frame(data_UF$cand[[i]]))
}
if(data_UF$cand[[i]]$seq =='2'){
df_segundo <- rbind(df_segundo, as.data.frame(data_UF$cand[[i]]))
}
}
}
return(list(df_geral, df_primeiro, df_segundo))
}
# Create a df_geral
df_get_geral <- function(){
df_geral <- getdata_url()
return(df_geral[[1]])
}
# Create a df_primeiro colocado
df_get_primeiro <- function(){
df_primeiro <- getdata_url()
return(df_primeiro[[2]])
}
# Create a df_segundo colocado
df_get_segundo <- function(){
df_segundo <- getdata_url()
return(df_segundo[[3]])
}
# Tratamento dados df_geral -> Variáveis de interesse: pst - gd - cdabr - hg
df_geral <- df_get_geral()
df_geral <- select(df_geral, cdabr, hg, dg, pst)
df_geral['pst'] <- gsub(',', '.', df_geral$pst)
df_geral["pst"] <- sapply(df_geral$pst, as.numeric)
# Tratamento dados df_primeiro -> Variáveis de interesse: pvap - vap - nm - sqcand
df_primeiro <- df_get_primeiro()
df_primeiro <- select(df_primeiro, pvap, vap, nm, sqcand)
df_primeiro['pvap'] <- gsub(',', '.', df_primeiro$pvap)
df_primeiro['pvap'] <- sapply(df_primeiro$pvap, as.numeric)
# Tratamento dados df_segundo -> Variáveis de interesse: pvap - vap - nm - sqcand
df_segundo <- df_get_segundo()
df_segundo <- select(df_segundo, pvap, vap, nm, sqcand)
df_segundo['pvap'] <- gsub(',', '.', df_segundo$pvap)
df_segundo['pvap'] <- sapply(df_segundo$pvap, as.numeric)
# Permanecer datasets em csv
get_result(df_geral, df_primeiro, df_segundo)
# Permanecer datasets em csv
get_result(df_geral, df_primeiro, df_segundo)
# Tratamento dados df_segundo -> Variáveis de interesse: pvap - vap - nm - sqcand
df_segundo <- df_get_segundo()
# Permanecer datasets em csv
get_result(df_geral, df_primeiro, df_segundo)
# Permanecer datasets em csv
get_result(df_geral, df_primeiro, df_segundo)
# Permanecer datasets em csv
get_result(df_geral, df_primeiro, df_segundo)
# Permanecer datasets em csv
get_result(df_geral, df_primeiro, df_segundo)
# Permanecer datasets em csv
get_result(df_geral, df_primeiro, df_segundo)
# Permanecer datasets em csv
get_result(df_geral, df_primeiro, df_segundo)
# Permanecer datasets em csv
get_result(df_geral, df_primeiro, df_segundo)
# Permanecer datasets em csv
get_result(df_geral, df_primeiro, df_segundo)
df_segundo <- select(df_segundo, pvap, vap, nm, sqcand)
df_segundo['pvap'] <- gsub(',', '.', df_segundo$pvap)
df_segundo['pvap'] <- sapply(df_segundo$pvap, as.numeric)
# Permanecer datasets em csv
get_result(df_geral, df_primeiro, df_segundo)
data <- read_csv('results_time.csv', col_names = F)
View(data)
cand_1 <- filter(data, data$X3 == 'CANDIDATO 9999')
cand_1
data <- read_csv('results_time.csv', col_names = F)
View(data)
cand_1 <- filter(data, data$X3 == 'CANDIDATO 9999')
cand_1
cand_2 <- filter9data, data$X3 =='CANDIDATO 9997')
cand_2 <- filter(data, data$X3 =='CANDIDATO 9997')
ggplot() +
geom_line(data = cand_1, aes(x= X1, y=X2,  ), color = 'blue')+
geom_line(data = cand_2, aes(x= X1, y=X2), color = 'red')+
geom_point()+
xlab('Hora Atualização') +
ylab('Resultado %')
ggplot() +
geom_line(data = cand_1, aes(x= X1, y=X2 ), color = 'blue')+
geom_line(data = cand_2, aes(x= X1, y=X2), color = 'red')+
geom_point()+
xlab('Hora Atualização') +
ylab('Resultado %')
ggplot() +
geom_line(data = cand_1, aes(x= X1, y=X2 ), color = 'blue')+
geom_line(data = cand_2, aes(x= X1, y=X2), color = 'red')+
geom_point()+
xlab('Hora Atualização') +
ylab('Resultado %')
ggplot() +
geom_line(data = cand_1, aes(x= X1, y=X2 ), color = 'blue')+
geom_line(data = cand_2, aes(x= X1, y=X2), color = 'red')+
geom_point()+
xlab('Hora Atualização') +
ylab('Resultado %')
cand_1
as.data.frame(cand_1)
ggplot() +
geom_line(data = as.data.frame(cand_1), aes(x= X1, y=X2 ), color = 'blue')+
geom_line(data = as.data.frame(cadn_2), aes(x= X1, y=X2), color = 'red')+
geom_point()+
xlab('Hora Atualização') +
ylab('Resultado %')
cand_2 <- filter(data, data$X3 =='CANDIDATO 9997')
ggplot() +
geom_line(data = as.data.frame(cand_1), aes(x= X1, y=X2 ), color = 'blue')+
geom_line(data = as.data.frame(cadn_2), aes(x= X1, y=X2), color = 'red')+
geom_point()+
xlab('Hora Atualização') +
ylab('Resultado %')
ggplot() +
geom_line(data = as.data.frame(cand_1), aes(x= X1, y=X2 ), color = 'blue')+
geom_line(data = as.data.frame(cand_2), aes(x= X1, y=X2), color = 'red')+
geom_point()+
xlab('Hora Atualização') +
ylab('Resultado %')
data <- merge(cand1, cand2)
data <- merge(cand_1, cand_2)
data
data <- cbind(cand_1, cand_2)
data
View(data)
ggplot() +
geom_line(data = as.data.frame(cand_1), aes(x= X1, y=X2 ), color = 'blue')+
geom_point()+
xlab('Hora Atualização') +
ylab('Resultado %')
ggplot() +
geom_line(data = as.data.frame(cand_2), aes(x= X1, y=X2), color = 'red')+
ggplot() +
geom_line(data = cand_1, aes(x= X1, y=X2 ), color = 'blue')+
geom_point()+
xlab('Hora Atualização') +
ylab('Resultado %')
ggplot() +
geom_line(data = cand_1, aes(x= X1, y=X2 ), color = 'blue')+
geom_point()+
xlab('Hora Atualização') +
ylab('Resultado %')
ggplot() +
geom_line(data = as.data.frame(cand_2), aes(x= X1, y=X2), color = 'red')+
ggplot() +
geom_line(data = as.data.frame(cand_2), aes(x= X1, y=X2), color = 'red')+
geom_point()
ggplot() +
geom_line(data = as.data.frame(cand_2), aes(x= X1, y=X2), color = 'red')+
geom_point()
cand_1 <- filter(data, data$X3 == 'CANDIDATO 9999')
data <- read_csv('results_time.csv', col_names = F)
View(data)
cand_1 <- filter(data, data$X3 == 'CANDIDATO 9999')
cand_2 <- filter(data, data$X3 =='CANDIDATO 9997')
ggplot() +
geom_line(data = cand_1, aes(x= X1, y=X2 ), color = 'blue')+
geom_point()+
xlab('Hora Atualização') +
ylab('Resultado %')
cand_1
cand_1$X1
ggplot() +
geom_line(data = cand_1, aes(X1,  X2 ), color = 'blue')+
geom_point()+
xlab('Hora Atualização') +
ylab('Resultado %')
ggplot() +
geom_line(data = cand_1, aes(X1,  X2, group = 1 ), color = 'blue')+
geom_point()+
xlab('Hora Atualização') +
ylab('Resultado %')
ggplot() +
geom_line(data = cand_1, aes(X1,  X2, group = 1 ), color = 'blue')+
geom_line(data = as.data.frame(cand_2), aes(X1, X2, group=1), color = 'red')+
geom_point()+
xlab('Hora Atualização') +
ylab('Resultado %')
ggplot() +
geom_line(data = cand_1, aes(X1,  X2, group = 1 ), color = 'blue')+
geom_line(data = as.data.frame(cand_2), aes(X1, X2, group=1), color = 'red')+
geom_point(shape=21, color="black", fill="#69b3a2", size=6)+
xlab('Hora Atualização') +
ylab('Resultado %')
ggplot() +
geom_line(data = cand_1, aes(X1,  X2, group = 1 ), color = 'blue')+
geom_line(data = as.data.frame(cand_2), aes(X1, X2, group=1), color = 'red')+
geom_point(shape=21, color="black", fill="#69b3a2", size=6)+
xlab('Hora Atualização') +
ylab('Resultado %')
ggplot() +
geom_line(data = cand_1, aes(X1,  X2, group = 1 ), color = 'blue')+
geom_point(shape=21, color="black", fill="#69b3a2", size=6)+
geom_line(data = as.data.frame(cand_2), aes(X1, X2, group=1), color = 'red')+
geom_point(shape=21, color="black", fill="#69b3a2", size=6)+
xlab('Hora Atualização') +
ylab('Resultado %')
ggplot() +
#geom_line(data = cand_1, aes(X1,  X2, group = 1 ), color = 'blue')+
geom_point(shape=21, color="black", fill="#69b3a2", size=6)+
#geom_line(data = as.data.frame(cand_2), aes(X1, X2, group=1), color = 'red')+
geom_point(shape=21, color="black", fill="#69b3a2", size=6)+
xlab('Hora Atualização') +
ylab('Resultado %')
ggplot() +
geom_line(data = cand_1, aes(X1,  X2, group = 1 ), color = 'blue')+
geom_line(data = as.data.frame(cand_2), aes(X1, X2, group=1), color = 'red')+
geom_point(shape=21, color="black", fill="#69b3a2", size=6)+
xlab('Hora Atualização') +
ylab('Resultado %')
ggplot() +
geom_line(data = cand_1, aes(X1,  X2, group = 1 ), color = 'blue')+
geom_line(data = as.data.frame(cand_2), aes(X1, X2, group=1), color = 'red')+
#geom_point(shape=21, color="black", fill="#69b3a2", size=6)+
xlab('Hora Atualização') +
ylab('Resultado %')
shiny::runApp()
runApp()
pp <- ggplot() +
geom_line(data = cand_1, aes(X1,  X2, group = 1 ), color = 'blue')+
geom_line(data = as.data.frame(cand_2), aes(X1, X2, group=1), color = 'red')+
xlab('Hora Atualização') +
ylab('Resultado %')+
labels(c('teste','teste2'))
df <- read_csv('results_time.csv')
plot_result_time(df)
plot_result_time(df)
plot_result_time(df)
pp <- ggplot() +
geom_line(data = cand_1, aes(X1,  X2, group = 1 ), color = 'blue', fill='Teste')+
geom_line(data = as.data.frame(cand_2), aes(X1, X2, group=1), color = 'red')+
xlab('Hora Atualização') +
ylab('Resultado %')+
labels(c('teste','teste2'))
pp <- ggplot() +
geom_line(data = cand_1, aes(X1,  X2, group = 1 ), color = 'blue', fill='Teste')+
geom_line(data = as.data.frame(cand_2), aes(X1, X2, group=1), color = 'red')+
xlab('Hora Atualização') +
ylab('Resultado %')+
labels(c('teste','teste2'))
plot_result_time(df)
plot_result_time(df)
plot_result_time(df)
pp <- ggplot() +
geom_line(data = cand_1, aes(X1,  X2, group = 1 ), colour = 'JAIR BOLSONARO')+
geom_line(data = as.data.frame(cand_2), aes(X1, X2, group=1), colour = 'LULA')+
scale_colour_manual("", breaks = c('JAIR BOLSONARO', 'LULA'),
values = c('blue', 'red'))
plot_result_time(df)
plot_result_time(df)
plot_result_time(df)
plot_result_time(df)
plot_result_time(df)
plot_result_time(df)
plot_result_time(df)
plot_result_time(df)
plot_result_time(df)
plot_result_time(df)
plot_result_time(df)
plot_result_time(df)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
