colnames(df_plot_result) <- c('Hora_Atualizacao', 'R_Cand1', 'Nome_Cand1', 'R_Cand2', 'Nome_Cand2')
df_plot_result['R_Cand1'] <- sapply(df_plot_result$R_Cand1, as.numeric)
df_plot_result <- data.frame(
'HAtualizacao' <- hg,
'%Cand1' <- result_cand1,
'NomeCand1' <- nm_cand1,
'%Cand2' <- result_cand2,
'NomeCand2' <- nm_cand2
)
colnames(df_plot_result) <- c('Hora_Atualizacao', 'R_Cand1', 'Nome_Cand1', 'R_Cand2', 'Nome_Cand2')
df_plot_result['R_Cand1'] <- gsub(',', '.', df_plot_result$R_Cand1)
df_plot_result['R_Cand1'] <- sapply(df_plot_result$R_Cand1, as.numeric)
View(df_plot_result)
df_plot_result['R_Cand2'] <- gsub(',', '.', df_plot_result$R_Cand2)
df_plot_result['R_Cand2'] <- sapply(df_plot_result$R_Cand2, as.numeric)
View(df_plot_result)
write_csv(df_plot_result, 'results.csv', append= TRUE)
write_csv(df_plot_result, 'results.csv', append= TRUE)
write_csv(df_plot_result, 'results.csv', append= TRUE)
write_csv(df_plot_result, 'results.csv', append= TRUE)
hg_check <- read_csv('results.csv')
View(hg_check)
hg_check <- read_csv('results.csv', col_names = F)
View(hg_check)
if(hg_check$X1 == hg ){
print('passou')
}
hg <- (select(df1, hg) %>% filter(df1$cdabr == 'br'))[1,1]
if(hg_check$X1 == hg ){
print('passou')
}
hg_check$X1
tail(hg_check$X1, n=1)
if(hg_check$X1 == tail(hg_check$X1, n=1) ){
print('passou')
}
hg <- (select(df1, hg) %>% filter(df1$cdabr == 'br'))[1,1]
hg
if(hg_check$X1 == tail(hg_check$X1, n=1)[1,1] ){
print('passou')
}
tail(hg_check$X1, n=1)[1]
tail(hg_check$X1, n=1)[1,1]
tail(hg_check$X1, n=1)[1]
class(tail(hg_check$X1, n=1)[1])
as.character(tail(hg_check$X1, n=1)[1]))
as.character(tail(hg_check$X1, n=1)[1])))
as.character(tail(hg_check$X1, n=1)[1])
as.character(tail(hg_check$X1, n=1))
if(hg_check$X1 == as.character(tail(hg_check$X1, n=1)) ){
print('passou')
}
hg_check$X1
hg
if(hg == as.character(tail(hg_check$X1, n=1)) ){
print('passou')
}
if(hg != as.character(tail(hg_check$X1, n=1)) ){
print('passou')
}
if(hg != as.character(tail(hg_check$X1, n=1)) ){
print('passou')
}
hg_check <- read_csv('results.csv', col_names = F)
View(hg_check)
hg_check <- read_csv('results.csv', col_names = F)
write_csv(df_plot_result, 'results.csv', append= TRUE)
hg_check <- read_csv('results.csv', col_names = F)
View(hg_check)
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
# Carrega pacote para gerenciamento do deploy no r studio connect
library(rsconnect)
deployApp(launch.browser = F, forceUpdate = T )
source('app.r')
deployApp(launch.browser = F, forceUpdate = T )
library(shiny); source('app.r')
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
# Carrega dados estados
estados <- read.table('estados.txt', sep = ';', header = T)
# Configura link de acesso ao TSE
set_link1 <- 'https://resultados-sim.tse.jus.br/teste/ele2022/9722/dados-simplificados/'
set_link2 <-'-c0001-e009722-r.json'
for(uf in estados['Sigla']) {
links <- paste(set_link1, uf, '/', uf, set_link2, sep = '')
}
# Link antigo
#set_link1 <- 'https://resultados.tse.jus.br/oficial/ele2022/544/dados-simplificados/'
#set_link2 <-'-c0001-e000544-r.json'
getdata_url <- function(){
# Faz o Get dos arquivos JSON e configura dataframes
df_geral <- data.frame()
df_primeiro <- data.frame()
df_segundo <- data.frame()
for(link in links) {
data_UF <- httr::content(httr::GET(link))
df_geral <- rbind(df_geral, as.data.frame(data_UF)[1,1:64])
for(i in 1:2){
if(data_UF$cand[[i]]$seq =='1'){
df_primeiro <- rbind(df_primeiro, as.data.frame(data_UF$cand[[i]]))
}
if(data_UF$cand[[i]]$seq =='2'){
df_segundo <- rbind(df_segundo, as.data.frame(data_UF$cand[[i]]))
}
}
}
return(list(df_geral, df_primeiro, df_segundo))
}
# Create a df_geral
df_get_geral <- function(){
df_geral <- getdata_url()
return(df_geral[[1]])
}
# Create a df_primeiro colocado
df_get_primeiro <- function(){
df_primeiro <- getdata_url()
return(df_primeiro[[2]])
}
# Create a df_segundo colocado
df_get_segundo <- function(){
df_segundo <- getdata_url()
return(df_segundo[[3]])
}
shiny::runApp()
runApp()
runApp()
datageral <- read_csv('df_geral.csv')
datageral
View(datageral)
runApp()
select(datageral, pvv)
select(datageral, pst)
select(datageral, pst) %>% filter(values$df$cdabr == 'br'))[1,1]
select(datageral, pst) %>% filter(values$df$cdabr == 'br')))[1,1]
(select(datageral, pst) %>% filter(values$df$cdabr == 'br'))[1,1]
runApp()
(select(datageral, pst) %>% filter(datageral$cdabr == 'br'))[1,1]
(select(datageral, pst) %>% filter(datageral$cdabr == 'br'))[1,1]
runApp()
datageral <- reactivePoll(10000, session,
# This function returns the time that log_file was last modified
checkFunc = function() {
if (file.exists('df_geral.csv'))
file.info('df_geral.csv')$mtime[1]
else
""
},
# This function returns the content of log_file
valueFunc = function() {
read_csv('df_geral.csv')
}
datageral <- reactivePoll(10000, session,
datageral <- reactivePoll(10000, session,
# This function returns the time that log_file was last modified
checkFunc = function() {
if (file.exists('df_geral.csv'))
file.info('df_geral.csv')$mtime[1]
else
""
},
# This function returns the content of log_file
valueFunc = function() {
read_csv('df_geral.csv')
}
)
class(datageral)
runApp()
runApp()
obj1 = read.table('teste.txt')
abj1
obj1
obj1[1]
obj1$V1
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# Link antigo
#set_link1 <- 'https://resultados.tse.jus.br/oficial/ele2022/544/dados-simplificados/'
#set_link2 <-'-c0001-e000544-r.json'
library(rjson)
# Link antigo
#set_link1 <- 'https://resultados.tse.jus.br/oficial/ele2022/544/dados-simplificados/'
#set_link2 <-'-c0001-e000544-r.json'
library(rjson)
getdata_url <- function(){
# Faz o Get dos arquivos JSON e configura dataframes
df_geral <- data.frame()
df_primeiro <- data.frame()
df_segundo <- data.frame()
for(link in links) {
data_UF <- httr::content(httr::GET(link))
df_geral <- rbind(df_geral, as.data.frame(data_UF)[1,1:64])
for(i in 1:2){
if(data_UF$cand[[i]]$seq =='1'){
df_primeiro <- rbind(df_primeiro, as.data.frame(data_UF$cand[[i]]))
}
if(data_UF$cand[[i]]$seq =='2'){
df_segundo <- rbind(df_segundo, as.data.frame(data_UF$cand[[i]]))
}
}
}
return(list(df_geral, df_primeiro, df_segundo))
}
# Create a df_geral
df_get_geral <- function(){
df_geral <- getdata_url()
return(df_geral[[1]])
}
# Create a df_primeiro colocado
df_get_primeiro <- function(){
df_primeiro <- getdata_url()
return(df_primeiro[[2]])
}
# Create a df_segundo colocado
df_get_segundo <- function(){
df_segundo <- getdata_url()
return(df_segundo[[3]])
}
write(toJSON(df_get_geral()),'df_geral.json')
obj1 <- fromJSON('df_geral.json')
values$df <- fromJSON('df_geral.json')
df_get_geral().to_csv('df_geral2.csv')
obj1 = df_get_geral()
obj1.to_csv('df_geral2.csv')
View(obj1)
class(obj1$pst[1,1])
class(obj1$pst[1])
write.csv(df_get_geral, 'df_geral.csv', append = F)
write.csv(df_get_geral(), 'df_geral.csv', append = F)
obj2 = read_csv('df_geral.csv')
View(obj3)
View(obj2)
# Tratamento dados df_geral -> Vari치veis de interesse: pst - gd - cdabr - hg
df_geral <- df_get_geral()
df_geral
df_geral <- select(df_geral, cdabr, hg, gd, pst)
df_geral
obj1 <- select(df_geral, cdabr, hg, gd, pst)
df_geral
View(obj1)
# Tratamento dados df_geral -> Vari치veis de interesse: pst - gd - cdabr - hg
df_geral <- df_get_geral()
obj1 <- select(df_geral, cdabr, hg, gd, pst)
View(obj1)
obj1 <- select(df_geral, cdabr, hg, dg, pst)
View(obj1)
df_geral <- select(df_geral, cdabr, hg, dg, pst)
View(df_geral)
df_geral['pst'] <- gsub(',', '.', df_geral$pst)
df_geral["pst"] <- sapply(df_geral$pst, as.numeric)
View(df_geral)
write_csv(df_geral, 'df_geral.csv')
write_csv(df_geral, 'df_geral.csv')
# Tratamento dados df_primeiro -> Vari치veis de interesse: pvap - vap - nm - sqcand
df_primeiro <- df_get_primeiro()
df_primeiro <- select(df_primeiro, pvap, vap, nm, sqcand)
View(df_primeiro)
df_primeiro['pvap'] <- gsub(',', '.', df_primeiro$pvap)
df_primeiro['pvap'] <- sapply(df_primeiro$pvap, as.numeric)
View(df_primeiro)
write_csv(df_primeiro,'df_primeiro.csv')
# Tratamento dados df_segundo -> Vari치veis de interesse: pvap - vap - nm - sqcand
df_segundo <- df_get_segundo()
df_segundo <- select(df_segundo, pvap, vap, nm, sqcand)
df_segundo['pvap'] <- gsub(',', '.', df_segundo$pvap)
df_segundo['pvap'] <- sapply(df_segundo$pvap, as.numeric)
View(df_segundo)
runApp()
runApp()
obj1 = read_csv('df_geral.csv')
View(obj1)
class(obj1$hg)
runApp()
runApp()
x <- sample(1:10, 1)
x
x <- sample(1:10, 1)
x
x <- sample(1:10, 1)
x
runApp()
runApp()
runApp()
Sys.timezone(location = TRUE)
Sys.time(location = TRUE)
Sys.time()
Sys.setTimezone('GMT -3')
Sys.setTimezone('GMT-3')
Sys.setTimezone('GMT')
Sys.setenv(TZ='GMT-3')
Sys.time()
Sys.setenv(TZ='GMT-4')
Sys.time()
Sys.setenv(TZ='UTC-4')
Sys.time()
Sys.setenv(TZ='GMT')
Sys.time()
Sys.setenv(TZ='GMT3')
Sys.time()
Sys.setenv(TZ='GMT4')
Sys.time()
Sys.setenv(TZ='GMT3')
Sys.time()
runApp()
library(rsconnect)
deployApp()
runApp()
runApp()
# Carrega dados estados
estados <- read.table('estados.txt', sep = ';', header = T)
# Configura link de acesso ao TSE
set_link1 <- 'https://resultados-sim.tse.jus.br/teste/ele2022/9722/dados-simplificados/'
set_link2 <-'-c0001-e009722-r.json'
for(uf in estados['Sigla']) {
links <- paste(set_link1, uf, '/', uf, set_link2, sep = '')
}
while(TRUE){
getdata_url <- function(){
# Faz o Get dos arquivos JSON e configura dataframes
df_geral <- data.frame()
df_primeiro <- data.frame()
df_segundo <- data.frame()
for(link in links) {
data_UF <- httr::content(httr::GET(link))
df_geral <- rbind(df_geral, as.data.frame(data_UF)[1,1:64])
for(i in 1:2){
if(data_UF$cand[[i]]$seq =='1'){
df_primeiro <- rbind(df_primeiro, as.data.frame(data_UF$cand[[i]]))
}
if(data_UF$cand[[i]]$seq =='2'){
df_segundo <- rbind(df_segundo, as.data.frame(data_UF$cand[[i]]))
}
}
}
return(list(df_geral, df_primeiro, df_segundo))
}
# Create a df_geral
df_get_geral <- function(){
df_geral <- getdata_url()
return(df_geral[[1]])
}
# Create a df_primeiro colocado
df_get_primeiro <- function(){
df_primeiro <- getdata_url()
return(df_primeiro[[2]])
}
# Create a df_segundo colocado
df_get_segundo <- function(){
df_segundo <- getdata_url()
return(df_segundo[[3]])
}
# Tratamento dados df_geral -> Vari치veis de interesse: pst - gd - cdabr - hg
df_geral <- df_get_geral()
df_geral <- select(df_geral, cdabr, hg, dg, pst)
df_geral['pst'] <- gsub(',', '.', df_geral$pst)
df_geral["pst"] <- sapply(df_geral$pst, as.numeric)
# Tratamento dados df_primeiro -> Vari치veis de interesse: pvap - vap - nm - sqcand
df_primeiro <- df_get_primeiro()
df_primeiro <- select(df_primeiro, pvap, vap, nm, sqcand)
df_primeiro['pvap'] <- gsub(',', '.', df_primeiro$pvap)
df_primeiro['pvap'] <- sapply(df_primeiro$pvap, as.numeric)
View(df_primeiro)
# Tratamento dados df_segundo -> Vari치veis de interesse: pvap - vap - nm - sqcand
df_segundo <- df_get_segundo()
df_segundo <- select(df_segundo, pvap, vap, nm, sqcand)
df_segundo['pvap'] <- gsub(',', '.', df_segundo$pvap)
df_segundo['pvap'] <- sapply(df_segundo$pvap, as.numeric)
View(df_segundo)
# Permanecer datasets em csv
write_csv(df_geral, 'df_geral.csv')
write_csv(df_primeiro,'df_primeiro.csv')
write_csv(df_segundo,'df_segundo.csv')
Sys.sleep(300)
} # Fim While
# Carrega dados estados
estados <- read.table('estados.txt', sep = ';', header = T)
# Configura link de acesso ao TSE
set_link1 <- 'https://resultados-sim.tse.jus.br/teste/ele2022/9722/dados-simplificados/'
set_link2 <-'-c0001-e009722-r.json'
for(uf in estados['Sigla']) {
links <- paste(set_link1, uf, '/', uf, set_link2, sep = '')
}
while(TRUE){
getdata_url <- function(){
# Faz o Get dos arquivos JSON e configura dataframes
df_geral <- data.frame()
df_primeiro <- data.frame()
df_segundo <- data.frame()
for(link in links) {
data_UF <- httr::content(httr::GET(link))
df_geral <- rbind(df_geral, as.data.frame(data_UF)[1,1:64])
for(i in 1:2){
if(data_UF$cand[[i]]$seq =='1'){
df_primeiro <- rbind(df_primeiro, as.data.frame(data_UF$cand[[i]]))
}
if(data_UF$cand[[i]]$seq =='2'){
df_segundo <- rbind(df_segundo, as.data.frame(data_UF$cand[[i]]))
}
}
}
return(list(df_geral, df_primeiro, df_segundo))
}
# Create a df_geral
df_get_geral <- function(){
df_geral <- getdata_url()
return(df_geral[[1]])
}
# Create a df_primeiro colocado
df_get_primeiro <- function(){
df_primeiro <- getdata_url()
return(df_primeiro[[2]])
}
# Create a df_segundo colocado
df_get_segundo <- function(){
df_segundo <- getdata_url()
return(df_segundo[[3]])
}
# Tratamento dados df_geral -> Vari치veis de interesse: pst - gd - cdabr - hg
df_geral <- df_get_geral()
df_geral <- select(df_geral, cdabr, hg, dg, pst)
df_geral['pst'] <- gsub(',', '.', df_geral$pst)
df_geral["pst"] <- sapply(df_geral$pst, as.numeric)
# Tratamento dados df_primeiro -> Vari치veis de interesse: pvap - vap - nm - sqcand
df_primeiro <- df_get_primeiro()
df_primeiro <- select(df_primeiro, pvap, vap, nm, sqcand)
df_primeiro['pvap'] <- gsub(',', '.', df_primeiro$pvap)
df_primeiro['pvap'] <- sapply(df_primeiro$pvap, as.numeric)
# Tratamento dados df_segundo -> Vari치veis de interesse: pvap - vap - nm - sqcand
df_segundo <- df_get_segundo()
df_segundo <- select(df_segundo, pvap, vap, nm, sqcand)
df_segundo['pvap'] <- gsub(',', '.', df_segundo$pvap)
df_segundo['pvap'] <- sapply(df_segundo$pvap, as.numeric)
# Permanecer datasets em csv
write_csv(df_geral, 'df_geral.csv')
write_csv(df_primeiro,'df_primeiro.csv')
write_csv(df_segundo,'df_segundo.csv')
Sys.sleep(300)
} # Fim While
shiny::runApp()
obj1 <- read_csv('df_geral.csv')
View(obj1)
((select(obj1, hg)) %>% filter(values$df$cdabr == 'br'))[1,1])
((select(obj1, hg)) %>% filter(values$df$cdabr == 'br'))[1,1]
((select(obj1, hg)) %>% filter(obj1$cdabr == 'br'))[1,1]
paste(((select(obj1, hg)) %>% filter(obj1$cdabr == 'br'))[1,1])
paste0(((select(obj1, hg)) %>% filter(obj1$cdabr == 'br'))[1,1])
((select(obj1, hg)) %>% filter(obj1$cdabr == 'br'))[1,1]
paste0(((select(obj1, hg)) %>% filter(obj1$cdabr == 'br'))[1,1])
a < - ((select(obj1, hg)) %>% filter(obj1$cdabr == 'br'))[1,1]
a <- ((select(obj1, hg)) %>% filter(obj1$cdabr == 'br'))[1,1]
as.character(a)
as.character(a)
a
class(a)
a[1]
a[1,1]
class(a[1,1])
as.POSIXct(a)
as.POSIXct(a)
class(a[1,1])
a
a[,1]
a[0]
a[1]
as.character(a[1])
class(a)
teste = data.frame(a)
teste
teste[1,1]
class(teste[1,1])
as.character(teste[1,1]))
as.character(teste[1,1])
as.character(data.frame(((select(values$df, hg)) %>% filter(values$df$cdabr == 'br'))[1,1])))
as.character(data.frame(((select(values$df, hg)) %>% filter(values$df$cdabr == 'br'))[1,1]))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
obj1 = read_csv('df_primeiro.csv')
(select(obj1, vap))[1,1])
(select(obj1, vap))[1,1]
class((select(obj1, vap))[1,1])
class(data.frame((select(obj1, vap))[1,1])
)
class(data.frame((select(obj1, vap))[1,1]))
data.frame((select(obj1, vap))[1,1])
data.frame((select(obj1, vap)))
data.frame((select(obj1, vap))[1,1])
data.frame((select(obj1, vap))[1,1])[1,1]
class(data.frame((select(obj1, vap))[1,1])[1,1])
data.frame((select(obj1, vap))[1,1])[1,1]
runApp()
data.frame((select(obj1, vap))[1,1])[1,1]
runApp()
