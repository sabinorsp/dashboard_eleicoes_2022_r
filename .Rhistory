source("ui.R")
source("server.R")
# Executa aplicação
shinyApp(ui, server)
runApp()
runApp()
runApp()
library(shiny); runApp('~/Desktop/Estudos/formacao_cientista_dados_academy/Big_Data_Analytics/Cap_10_Estatistica_Parte3/EstudoCaso3.R')
runApp()
library(shiny)
runApp()
runApp()
runApp()
runApp()
runApp()
source('app.R')
source('app.R')
source('app.R')
runApp()
func_teste <- function(){
for (i in 1:10){
print(i)
}
}
delay(5000, func_teste)
if (interactive()) {
library(shiny)
shinyApp(
ui = fluidPage(
useShinyjs(),
p(id = "text", "This text will disappear after 3 seconds"),
actionButton("close", "Close the app in half a second")
),
server = function(input, output) {
delay(3000, hide("text"))
observeEvent(input$close, {
delay(500, stopApp())
})
}
)
}
runApp()
shinyApp(ui, server)
if (interactive()) {
library(shiny)
shinyApp(
ui = fluidPage(
useShinyjs(),
p(id = "text", "This text will disappear after 3 seconds"),
actionButton("close", "Close the app in half a second")
),
server = function(input, output) {
delay(3000, hide("text"))
observeEvent(input$close, {
delay(500, stopApp())
})
}
)
}
shinyApp(ui, server)
# Arquivo para teste de atualização
library(shinyjs)
func_teste <- function(){
for (i in 1:10){
print(i)
}
}
delay(5000, func_teste)
# Arquivo para teste de atualização
library(shinyjs)
library(shiny)
shinyApp(
ui = fluidPage(
useShinyjs(),
p(id = "text", "This text will disappear after 3 seconds"),
actionButton("close", "Close the app in half a second")
),
server = function(input, output) {
delay(3000, hide("text"))
observeEvent(input$close, {
delay(500, stopApp())
})
}
)
runApp()
source('app.R')
source('app.R')
Sys.Date()
Sys.time()
class(Sys.time())
Sys.time()[2]
Sys.time()[1]
Sys.time()[1,2]
Sys.time()
?Sys.time()
format(Sys.time(), "%a %b %d %X %Y")
format(Sys.time(), "%a %b %d %X)
format(Sys.time(), "%a %b %d %X)
format(Sys.time(), "%a %b %d %X)
)
)
)
asd
awsd2qw23e4e21q3
65
____-0_)
casd
asd
as_data_frame()
runApp()
library(shiny)
source('app.R')
source('app.R')
format(Sys.time(), "%a %b %d %X %Y")
format(Sys.time(), "%a %b %d %X ")
format(Sys.time(), " %d %X ")
%a %b
format(Sys.time(), "%a %b %d %X ")
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
library(shiny); source('app.R')
df_geral()
source('app.R')
df_geral()
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
runApp()
library(shiny); source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
runApp()
source('app.r')
source('func_getdataTSE.R')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
runApp()
obj1 <- df_geral()
obj1$pvv
length(obj1$pvv)
View(obj1$pvv)
View(obj1)
source('app.r')
source('app.r')
source('func_getdataTSE.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
df_geral
df_primeiro()
df_primeiro
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
cat(values)
source('app.r')
out
source('app.r')
source('app.r')
source('app.r')
source('app.r')
out
source('app.r')
source('app.r')
obj1 = 'AAA'
source('app.r')
source('app.r')
runApp()
runApp()
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
runApp()
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
runApp()
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
# Create teste
df_get_teste <- function(){
df_teste <- read.table('teste.txt')
return(df_teste)
}
obj1 = df_teste()
obj1 = df_get_teste()
obj1
return(df_teste[1])
# Create teste
df_get_teste <- function(){
df_teste <- read.table('teste.txt')
return(df_teste[1])
}
obj1 = df_get_teste()
obj1
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
library(shiny); source('app.r')
source('app.r')
source('app.r')
source('app.r')
runApp()
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('getdataTSE.r')
source('app.r')
source('plot_pvv.r')
# Carrega dados estados
estados <- read.table('estados.txt', sep = ';', header = T)
source('app.r')
source('app.r')
library(shiny); source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
library(shiny); source('app.r')
library(shiny); source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
page_resumo <- fluidRow(
includeCSS("www/css.css"),
# Current time
h2(textOutput('currentTime')),
# Apuração % Total
h2(infoBoxOutput("pvv", width = NULL)),
# Primeiro Colocado
#imageOutput('cand_1'),
box(
title = '1° Colocado:',
status = 'success',
solidHeader = TRUE,
collapsible = F,
span(imageOutput("num_cand1", inline=T)),
#div(class='inline-block',infoBoxOutput("qtd_voto1", width = NULL)),
valueBoxOutput("cand_1_percent", width = NULL),
),
# Segundo Colocado
box(
title = '2°- Colocado',
status = 'warning',
solidHeader = TRUE,
collapsible = FALSE,
imageOutput('num_cand2',width = "50%", inline=T),
div(class='inline-block',infoBoxOutput("qtd_voto2", width = NULL)),
valueBoxOutput("cand_2_percent", width = NULL)),
# Plot % de apuração por região
box(
title = 'Relação de apurações por região',
width = 10,
status = 'primary',
solidHeader = TRUE,
background = 'aqua',
collapsible = T,
plotOutput("plot_pvv", height = 380)
),
# Diferença de Votos entre 1° e 2°
box(
title = 'Diferença de Votos entre o 1° E 2° Colocado:',
status = 'primary',
solidHeader = T,
background = 'aqua',
width = 6,
collapsible = T,
h3(textOutput("diff"))
)
)# FIM
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
runApp()
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
page_resumo <- fluidRow(
includeCSS("www/css.css"),
# Current time
h2(textOutput('currentTime')),
# Apuração % Total
h2(infoBoxOutput("pvv", width = NULL)),
# Primeiro Colocado
#imageOutput('cand_1'),
box(
title = textOutput('qtd_voto1'),
status = 'success',
solidHeader = TRUE,
collapsible = F,
span(imageOutput("num_cand1", inline=T)),
#div(class='inline-block',infoBoxOutput("qtd_voto1", width = NULL)),
valueBoxOutput("cand_1_percent", width = NULL),
),
# Segundo Colocado
box(
title = textOutput('qtd_voto2'),
status = 'warning',
solidHeader = TRUE,
collapsible = FALSE,
imageOutput('num_cand2', inline=T),
#div(class='inline-block',infoBoxOutput("qtd_voto2", width = NULL)),
valueBoxOutput("cand_2_percent", width = NULL)),
# Plot % de apuração por região
box(
title = 'Relação de apurações por região',
width = 10,
status = 'primary',
solidHeader = TRUE,
background = 'aqua',
collapsible = T,
plotOutput("plot_pvv", height = 380)
),
# Diferença de Votos entre 1° e 2°
box(
title = 'Diferença de Votos entre o 1° E 2° Colocado:',
status = 'primary',
solidHeader = T,
background = 'aqua',
width = 6,
collapsible = T,
h3(textOutput("diff"))
)
)# FIM
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
page_resumo <- fluidRow(
includeCSS("www/css.css"),
# Current time
h2(textOutput('currentTime')),
# Apuração % Total
h2(infoBoxOutput("pvv", width = NULL)),
# Primeiro Colocado
box(
title = div(textOutput('qtd_voto1'), style= 'font-size:36px; bold'),
status = 'primary',
solidHeader = TRUE,
collapsible = F,
imageOutput("num_cand1",),
valueBoxOutput("cand_1_percent", width = NULL),
),
# Segundo Colocado
box(
title = div(textOutput('qtd_voto2'), style= 'font-size:36px; bold'),
status = 'primary',
solidHeader = TRUE,
collapsible = FALSE,
imageOutput('num_cand2', inline = T),
valueBoxOutput("cand_2_percent", width = NULL)),
# Plot % de apuração por região
box(
title = 'Relação de apurações por região',
width = 10,
status = 'primary',
solidHeader = TRUE,
background = 'aqua',
collapsible = T,
plotOutput("plot_pvv", height = 380)
),
# Diferença de Votos entre 1° e 2°
box(
title = 'Diferença de Votos entre o 1° E 2° Colocado:',
status = 'primary',
solidHeader = T,
background = 'aqua',
width = 6,
collapsible = T,
h3(textOutput("diff"))
)
)# FIM
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
source('app.r')
